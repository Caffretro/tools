#!/usr/bin/python

"""
Usage:
  %s [options] output-001 output-002

Compare and print any version differences between RPMs installed in both of
two osg-test run directories, as found in output-NNN/output/osg-test-*.log

The outputs can also be a root.log from a koji/mock build.

Options:
  -A, --no-strip-arch  don't attempt to strip .arch from package names
  -D, --no-strip-dist  don't attempt to strip .dist tag from package releases
  --show-all           show versions for all packages
  --[no-]color         colorize version differences (default = True if tty)
"""

import glob
import stat
import sys
import os
import re

use_color  = sys.stdout.isatty()
show_all   = False
dirs       = []
strip_arch = True
strip_dist = True

arch_pat = r'\.(x86_64|i[3-6]86|noarch)$'
dist_pat = r'((\.osg(\d+)?)?\.[es]l[5-9](_[\d.]+)?(\.centos)?|\.osg|\.fc\d+)$'

def usage():
    print __doc__ % os.path.basename(__file__)
    sys.exit()

for arg in sys.argv[1:]:
    if   arg == '--color'                 : use_color  = True
    elif arg == '--no-color'              : use_color  = False
    elif arg in ('--show-all','--all')    : show_all   = True
    elif arg in ('-A', '--no-strip-arch') : strip_arch = False
    elif arg in ('-D', '--no-strip-dist') : strip_dist = False
    elif arg.startswith('-')              : usage()
    else                                  : dirs.append(arg)

if len(dirs) != 2:
    usage()

def arch_strip(na):
    return re.sub(arch_pat, '', na)

def dist_strip(evr):
    ev,r = evr.split('-')
    r = re.sub(dist_pat, '', r)
    return '-'.join([ev,r])

def nvrgen(items):
    # generate sequence of ["name.arch", "epoch:version-release"] pairs
    while items:
        na, evr = items[:2]
        if strip_arch:
            na = arch_strip(na)
        if strip_dist:
            evr = dist_strip(evr)
        if evr.startswith("0:"):
            evr = evr[2:]
        yield [na,evr]
        items[:2] = []

def isfile(fn):
    try:
        return stat.S_ISREG(os.stat(fn).st_mode)
    except OSError:
        return False

def nvrmap(output):
    if isfile(output):
        log = output
    else:
        globpat = "%s/output/osg-test-*.log" % output
        log = glob.glob(globpat)
        if len(log) != 1:
            print >>sys.stderr, "Error: could not find '%s'" % globpat
            sys.exit(1)
        log = log[0]

    # split this way since there can be more than one item per line
    txt = open(log).read()
    # strip "DEBUG util.py:388:  " in case this is coming from a root.log
    txt = re.sub(r'\n[A-Z]+ .*?:\d+:  ', r'\n', txt)
    items_pat = r'^(?:Dependency )?Installed:\n(.*?)\n(?:\n|(?=[^ ]))'
    items = ' '.join(re.findall(items_pat, txt, re.S | re.M)).split()
    return dict(nvrgen(items))

rpms1,rpms2 = map(nvrmap,dirs)

if strip_arch:
    bare_rpms1 = set(rpms1)
    bare_rpms2 = set(rpms2)
else:
    bare_rpms1 = set(map(arch_strip, rpms1))
    bare_rpms2 = set(map(arch_strip, rpms2))

all_rpms   = set(rpms1) | set(rpms2)
match_rpms = bare_rpms1 & bare_rpms2

if strip_arch:
    all_match_rpms = match_rpms
else:
    all_match_rpms = set(x for x in all_rpms if arch_strip(x) in match_rpms)

def colorize(color, *seq):
    return [ "\x1b[%sm%s\x1b[0m" % (color, x) for x in seq ]

def colorize_vr(vr1, vr2):
    v1,r1 = vr1.split('-')
    v2,r2 = vr2.split('-')

    if v1 != v2:
        v1,v2 = colorize('1;32', v1, v2)
    elif r1 != r2:
        r1,r2 = colorize('1;34', r1, r2)

    return map('-'.join, [[v1,r1],[v2,r2]])

pkg_diffs = []
for pkg in sorted(all_rpms if show_all else all_match_rpms):
    vr1 = rpms1.get(pkg) or '-'
    vr2 = rpms2.get(pkg) or '-'
    if show_all or vr1 != vr2:
        pkg_diffs.append([pkg, vr1, vr2])

if pkg_diffs:
    pkg_diffs[:0] = [["Package"] + dirs]
    widths = [ max(map(len,col)) for col in zip(*pkg_diffs) ]
    pkg_diffs[1:1] = [[ '-' * n for n in widths ]]
    for i,row in enumerate(pkg_diffs):
        spacing = [ w-len(x) for x,w in zip(row,widths) ]
        if use_color and i > 1:
            row[1:] = colorize_vr(*row[1:])
        print '  '.join( r + ' ' * s for r,s in zip(row,spacing) ).rstrip()
else:
    print "No package version differences"

